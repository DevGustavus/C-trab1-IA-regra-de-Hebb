import numpy as np
import random as rd
import matplotlib.pyplot as plt

print("\x1b[2]\x1b[1;1H") #Limpa a tela do terminal e posiciona o cursor na parte superior esquerda.

# sen(X)*sen(2X).
entradas = 1
neur 200
alfa 0.005
errotolerado = 0.5 # Testes: 0.5 0.1 0.05/0.02.
listaciclo = []
listaerro = []
xmin = -1 # Limite inferior da funi o
xmax = 1 # Limite superior da funi o.
npontos = 50 # N mero de pontos igualmente espaiados.

#Gerando o arquivo de entradas
x_orig = np.linspace (xmin, xmax,npontos) # Criai o dos pontos igualmente espaiados.
x = np.zeros((npontos,1))
for i in range(npontos):
    x[i][0]=x_orig[i] # Entradas prontas para a RNA.
#End For

(amostras, vsai) = np.shape(x) # 50 amostras e 1 sa da.

t_orig = (np.sin(x))*(np.sin(2*x)) # Target "puro".
t = np.zeros((1, amostras))
(amostras, vsai) = np. shape(x) # 50 amostras e 1 sa da.

t_orig = (np.sin(x))*(np.sin(2*x)) # Target "puro".
t = np.zeros((1, amostras))
for i in range(amostras):
    t[0][i]=t_orig[i] # Target pronto para a RNA.
#End For

(vsai, amostras) = np.shape(t) # [50][1]

# Gerando os pesos sin pticos aleatoriamente.
v = np.zeros((entradas, neur))
aleatorio = 1
for i in range(entradas):
    for j in range(neur):
        v[i][j] = rd.uniform(-aleatorio, aleatorio)
    #End For
#End For

v0 = np.zeros((1,neur))
for j in range(neur):
    v0[0][j] = rd.uniform(-aleatorio, aleatorio)
#End For

w = np.zeros((neur,vsai))
aleatorio = 0.2
for i in range(neur):
    for j in range(vsai):
        w[i][j] = rd.uniform(-aleatorio, aleatorio)
    #End For
#End For


w0=np.zeros((1,vsai))
for j in range(vsai):
    w0[0][j]=rd.uniform(-aleatorio, aleatorio)
#End For

# Matrizes de atualizaì o de pesos e valores de saida da rede.
vnovo = np.zeros((entradas, neur))
vinovo = np.zeros((1,neur))
wnovo = np.zeros((neur, vsai))
w0novo = np.zeros((1, vsai))
zin_j = np.zeros((1, neur))
z_j = np.zeros((1,neur))
deltinha_k = np.zeros((vsai,1))
deltaw0 = np.zeros((vsai,1))
deltinha_j = np.zeros((1,neur))
x_linhaTransp = np.zeros((1, entradas))
y_transp = np.zeros((vsai,1))
t_transp = np.zeros((vsai,1))
deltinha_jTransp = np.zeros((neur,1))
ciclo = 0
errototal=1

while errotolerado < errototal:
    errototal=0
    for padrao in range(amostras):
        for j in range(neur):
            zin_j[0][j] = np.dot(x[padrao,:],v[:,j]) + v0[@][j]
        #End For

        z_j = np.tanh(zin_j) # Funi o de ativai o.

        yin = np.dot(z_j,w) + w✪ # Saída pura.
        y = np.tanh(yin) # Sa da 1 quida.

        for m in range(vsai):
            y_transp[m][0] = y[0][m]
        #End For

        for m in range(vsai):
            t_transp[m][0]=t[0][padrao]
        #End For

        errototal = errototal+(0.5*(np.sum(((t_transp-y_transp)**2))))

        # Busca das matrizes para atualizaì o dos pesos.
        deltinha_k = (t_transp - y_transp)*(1+ y_transp)*(1 - y_transp)
        deltaw = alfa* (np.dot (deltinha_k,z_j))
        deltaw0 = alfa * deltinha_k
        deltinhain_j = np.dot (np.transpose(deltinha_k), np.transpose(w))
        deltinha_j = deltinhain_j * (1 + z_j) * (1 − z_j)

        for m in range(neur):
            deltinha_jTransp[m][0] = deltinha_j[0][m]
        #End For

        for k in range(entradas):
            x_linhaTransp[0][k] = x[padrao][k]
        #End For

        deltav = alfa* np.dot (deltinha_jTransp,x_linhaTransp)
        deltav0 = alfa * deltinha_j

        #Realizando as atualizaì es de pesos e bias.
        vnovo = v + np.transpose(deltav)
        v0novo = v0 + np.transpose(deltav0)

        wnovo = w + np.transpose(deltaw)
        w0novo = w0 + np.transpose(deltaw0)

        # Preparo para o pr ximo laìo.
        v =vnovo
        v0 = v0novo
        W = wnovo
        w0 = w0novo
    #End: for padrao in range(amostras):
    ciclo = ciclo+1
    listaciclo.append(ciclo)
    listaerro.append(errototal)
    print('Ciclo\t Erro')
    print(ciclo, '\t', errototal)

    # Comparai o target e y.
    zin2_j = np.zeros((1, neur))
    z2_j = np.zeros((1,neur))
    t_teste = np.zeros((amostras,1))

    for i in range(amostras):
        for j in range(neur):
            zin2_j[0][j] = np.dot(x[i,:],v[:,j])+v0[0][j]
            z2_j = np.tanh(zin2_j)
        #End For
        yin2 = np.dot (z2_j,w) + w0
        y2 = np.tanh(yin2)
        t_teste[i][0] = y2
    #End For
#End While
plt.plot(x,t_orig, color='red')
plt.plot(x,t_teste,color='blue')
plt.show()